name: Security Scanning

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  # SAST - Static Application Security Testing
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/react
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Dependency vulnerability scanning
  trivy-repo:
    name: Trivy Repository Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Disabled - requires GitHub Advanced Security license
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'

  # Container image scanning (runs after Docker build)
  trivy-images:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    needs: []
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        service: [api, web]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -f apps/${{ matrix.service }}/Dockerfile -t ${{ matrix.service }}:test .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:test'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

  # Secret scanning
  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # NPM audit for known vulnerabilities
  npm-audit:
    name: NPM Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, web]
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run NPM audit
        run: pnpm --filter=${{ matrix.app }} audit --audit-level=high
        continue-on-error: true
      - name: Run pnpm audit
        run: pnpm audit --prod --audit-level=high

  # OWASP Dependency Check
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Disabled - requires GitHub Advanced Security license
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'rook'
          path: '.'
          format: 'SARIF'
          args: >
            --enableRetired
            --enableExperimental
            --suppression dependency-check-suppressions.xml
      - name: Upload OWASP results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: reports/dependency-check-report.sarif

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, web]
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Check licenses for ${{ matrix.app }}
        working-directory: apps/${{ matrix.app }}
        run: |
          pnpm add -g license-checker
          license-checker --production --excludePrivatePackages --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense" --summary

  # Security headers check (for deployed apps)
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Check security headers
        run: |
          # This will check production URL once deployed
          # For now, just a placeholder
          echo "Security headers check - implement after deployment"
