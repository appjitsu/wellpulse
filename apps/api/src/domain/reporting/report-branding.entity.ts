/**
 * Report Branding Entity (Aggregate Root)
 *
 * Manages white-label branding configuration for tenant PDF reports.
 * Each tenant has one branding configuration.
 */

import { CompanyInfo } from './value-objects/company-info.vo';
import { BrandColors } from './value-objects/brand-colors.vo';
import { LogoAsset } from './value-objects/logo-asset.vo';

export interface CreateReportBrandingProps {
  tenantId: string;
  companyInfo: CompanyInfo;
  brandColors?: BrandColors;
  headerText?: string;
  footerText?: string;
}

export interface ReportBrandingProps {
  id: string;
  tenantId: string;
  companyInfo: CompanyInfo;
  brandColors: BrandColors; // Required when reconstituting from persistence
  logoAsset: LogoAsset | null;
  headerText?: string;
  footerText?: string;
  createdAt: Date;
  updatedAt: Date;
}

export class ReportBranding {
  private constructor(
    public readonly id: string,
    private _tenantId: string,
    private _companyInfo: CompanyInfo,
    private _brandColors: BrandColors,
    private _logoAsset: LogoAsset | null,
    private _headerText: string | null,
    private _footerText: string | null,
    public readonly createdAt: Date,
    private _updatedAt: Date,
  ) {
    this.validate();
  }

  /**
   * Create new report branding configuration
   */
  static create(props: CreateReportBrandingProps): ReportBranding {
    const id = crypto.randomUUID();
    const now = new Date();

    const brandColors = props.brandColors || BrandColors.DEFAULT;

    const branding = new ReportBranding(
      id,
      props.tenantId,
      props.companyInfo,
      brandColors,
      null, // No logo initially
      props.headerText || null,
      props.footerText || null,
      now,
      now,
    );

    branding.validate();

    return branding;
  }

  /**
   * Reconstitute from persistence
   */
  static reconstitute(props: ReportBrandingProps): ReportBranding {
    const branding = new ReportBranding(
      props.id,
      props.tenantId,
      props.companyInfo,
      props.brandColors,
      props.logoAsset,
      props.headerText || null,
      props.footerText || null,
      props.createdAt,
      props.updatedAt,
    );

    branding.validate();

    return branding;
  }

  // Getters
  get tenantId(): string {
    return this._tenantId;
  }

  get companyInfo(): CompanyInfo {
    return this._companyInfo;
  }

  get brandColors(): BrandColors {
    return this._brandColors;
  }

  get logoAsset(): LogoAsset | null {
    return this._logoAsset;
  }

  get headerText(): string | null {
    return this._headerText;
  }

  get footerText(): string | null {
    return this._footerText;
  }

  get updatedAt(): Date {
    return new Date(this._updatedAt);
  }

  /**
   * Update company information
   */
  updateCompanyInfo(companyInfo: CompanyInfo): void {
    this._companyInfo = companyInfo;
    this._updatedAt = new Date();
  }

  /**
   * Update brand colors
   */
  updateBrandColors(colors: BrandColors): void {
    this._brandColors = colors;
    this._updatedAt = new Date();
  }

  /**
   * Upload new company logo
   */
  uploadLogo(logoAsset: LogoAsset): void {
    this._logoAsset = logoAsset;
    this._updatedAt = new Date();
  }

  /**
   * Remove company logo
   */
  removeLogo(): void {
    this._logoAsset = null;
    this._updatedAt = new Date();
  }

  /**
   * Update header text
   */
  updateHeaderText(headerText: string | null): void {
    if (headerText && headerText.length > 500) {
      throw new Error('Header text must not exceed 500 characters');
    }
    this._headerText = headerText;
    this._updatedAt = new Date();
  }

  /**
   * Update footer text
   */
  updateFooterText(footerText: string | null): void {
    if (footerText && footerText.length > 500) {
      throw new Error('Footer text must not exceed 500 characters');
    }
    this._footerText = footerText;
    this._updatedAt = new Date();
  }

  /**
   * Check if branding has a logo
   */
  hasLogo(): boolean {
    return this._logoAsset !== null;
  }

  /**
   * Check if branding is complete (has all required fields)
   */
  isComplete(): boolean {
    return (
      this._companyInfo !== null && this._brandColors !== null
      // Logo is optional
    );
  }

  /**
   * Get default header text if custom text not set
   */
  getEffectiveHeaderText(): string {
    return this._headerText || `${this._companyInfo.companyName} Report`;
  }

  /**
   * Get default footer text if custom text not set
   */
  getEffectiveFooterText(): string {
    return this._footerText || 'Generated by WellPulse';
  }

  /**
   * Convert to primitives for persistence
   */
  toPrimitives(): {
    id: string;
    tenantId: string;
    companyInfo: {
      companyName: string;
      address: string;
      city: string;
      state: string;
      zipCode: string;
      phone: string | null;
      email: string | null;
      website: string | null;
    };
    brandColors: {
      primary: string;
      secondary: string;
      text: string;
      background: string;
    };
    logoAsset: {
      blobUrl: string;
      fileName: string;
      mimeType: string;
      sizeBytes: number;
      width: number;
      height: number;
      uploadedAt: Date;
    } | null;
    headerText: string | null;
    footerText: string | null;
    createdAt: Date;
    updatedAt: Date;
  } {
    return {
      id: this.id,
      tenantId: this._tenantId,
      companyInfo: {
        companyName: this._companyInfo.companyName,
        address: this._companyInfo.address,
        city: this._companyInfo.city,
        state: this._companyInfo.state,
        zipCode: this._companyInfo.zipCode,
        phone: this._companyInfo.phone,
        email: this._companyInfo.email,
        website: this._companyInfo.website,
      },
      brandColors: {
        primary: this._brandColors.primary,
        secondary: this._brandColors.secondary,
        text: this._brandColors.text,
        background: this._brandColors.background,
      },
      logoAsset: this._logoAsset
        ? {
            blobUrl: this._logoAsset.blobUrl,
            fileName: this._logoAsset.fileName,
            mimeType: this._logoAsset.mimeType,
            sizeBytes: this._logoAsset.sizeBytes,
            width: this._logoAsset.width,
            height: this._logoAsset.height,
            uploadedAt: this._logoAsset.uploadedAt,
          }
        : null,
      headerText: this._headerText,
      footerText: this._footerText,
      createdAt: this.createdAt,
      updatedAt: this._updatedAt,
    };
  }

  protected validate(): void {
    if (!this._tenantId) {
      throw new Error('Tenant ID is required');
    }

    if (!this._companyInfo) {
      throw new Error('Company info is required');
    }

    if (!this._brandColors) {
      throw new Error('Brand colors are required');
    }

    if (this._headerText && this._headerText.length > 500) {
      throw new Error('Header text must not exceed 500 characters');
    }

    if (this._footerText && this._footerText.length > 500) {
      throw new Error('Footer text must not exceed 500 characters');
    }
  }
}
